raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
?vector_to_string
?string_to_vector
pval_MSE
remove.packages('TVA')
install_github('SimonYFR/TVA')
library('devtools')
install_github('SimonYFR/TVA')
library('TVA')
### path
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
path_LM <- "~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path = path_SY    #change this
setwd(path)
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
?vector_to_string
pval_MSE
remove.packages('TVA')
install_github('SimonYFR/TVA')
library('TVA')
?grid_pval_OSE
library('devtools')
install_github('SimonYFR/TVA')
library('TVA')
?do_TVA
?pval_MSE
pval_MSE
### path
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
path_LM <- "~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path = path_SY    #change this
setwd(path)
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
?vector_to_string
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1,0)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
pval_MSE
scale=FALSE
compare_to_zero=FALSE
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
current_variables = variables
deselect_list <- c()
deselect_pval <- c()
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X, se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
n=length(variables)
i=0
print("Starting the multiple step elimination procedure")
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
support = variables[!(variables %in% deselect_list)]
result = list(support=support, pvals = deselect_pval, eliminated_variables = deselect_list)
c
c
c
c
c
c
c
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
scale=FALSE
compare_to_zero=FALSE
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
current_variables = variables
deselect_list <- c()
deselect_pval <- c()
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X, se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
n=length(variables)
i=0
print("Starting the multiple step elimination procedure")
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
support = variables[!(variables %in% deselect_list)]
i
pval_MSE = list(support=support, pvals = deselect_pval, eliminated_variables = deselect_list)
pvals = pval_MSE$pvals
eliminated_variables = pval_MSE$eliminated_variables
pvals_MSE = data.frame(pvals[which(eliminated_variables %in% marginals_colnames)]) %>% setNames(.,c('pval'))
pvals_MSE$size_of_support = rev(c(1:nrow(pvals_MSE)))
pvals_MSE$pval_cutoff = cummin(pvals_MSE$pval)
plot = ggplot2::ggplot(data=pvals_MSE, ggplot2::aes(x=size_of_support)) +
ggplot2::geom_line(ggplot2::aes(y = pval), color="black", linetype="dashed") +
ggplot2::geom_line(ggplot2::aes(y = pval_cutoff), color="steelblue") +
ggplot2::geom_point(ggplot2::aes(y = pval), color="black")+
ggplot2::scale_y_continuous(trans='log10')
plot
?plot_pval_MSE
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
#source('support_estimation.R')
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
pval_MSE = pval_MSE(X,y,variables,0)
pvals = pval_MSE$pvals
eliminated_variables = pval_MSE$eliminated_variables
pvals_MSE = data.frame(pvals[which(eliminated_variables %in% marginals_colnames)]) %>% setNames(.,c('pval'))
pval_MSE
pval_MSE(X,y,variables,0)
pvals
pval_MSE$eliminated_variables
eliminated_variables
pval_MSE(X,y,variables,0)
current_variables = variables
deselect_list <- c()
deselect_pval <- c()
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X, se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
n=length(variables)
i=0
print("Starting the multiple step elimination procedure")
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
cat("\n",current_max_pval,"\n")
support = variables[!(variables %in% deselect_list)]
result = list(support=support, pvals = deselect_pval, eliminated_variables = deselect_list)
result
pval_MSE(X,y,variables,0)
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
scale=FALSE
compare_to_zero=FALSE
#source('support_estimation.R')
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
pval_MSE(X,y,variables,0)
current_variables = variables
deselect_list <- c()
deselect_pval <- c()
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X, se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
n=length(variables)
i=0
print("Starting the multiple step elimination procedure")
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
cat("\n",current_max_pval,"\n")
support = variables[!(variables %in% deselect_list)]
result = list(support=support, pvals = deselect_pval, eliminated_variables = deselect_list)
result
?plot_pval_OSE
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_OSE(data,arms,fes,y,w,FALSE,FALSE)
?plot_pval_MSE
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
#source('support_estimation.R')
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
scale=FALSE
compare_to_zero=FALSE
#source('support_estimation.R')
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
pval_MSE = pval_MSE(X,y,variables,0)
pvals = pval_MSE$pvals
eliminated_variables = pval_MSE$eliminated_variables
pval_MSE
pvals_MSE = data.frame(pvals[which(eliminated_variables %in% marginals_colnames)]) %>% setNames(.,c('pval'))
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
scale=FALSE
compare_to_zero=FALSE
#source('support_estimation.R')
prepared_data = prepare_data(data,arms,fes,y,w,scale,compare_to_zero)
X = prepared_data$X
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
a = pval_MSE(X,y,variables,0)
a
current_variables = variables
deselect_list <- c()
deselect_pval <- c()
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X, se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
n=length(variables)
i=0
print("Starting the multiple step elimination procedure")
while (current_max_pval > pval_cutoff) {
i=i+1
cat("\rProgress: ",i," variables eliminated on ", n)
deselect_name <- names(current_pvals[which.max(current_pvals)])
deselect_list <- c(deselect_list, deselect_name)
deselect_pval <- c(deselect_pval, current_pvals[which.max(current_pvals)])
current_variables <- current_variables[current_variables != deselect_name]
if (length(current_variables)==0){
print("pval_cutoff is too strict, no variable survived")
return(c())
}
current_sp_formula <- as.formula(paste0(y,"~",paste0(c(current_variables,0),collapse = "+")))
current_model_ols <- estimatr::lm_robust(formula = current_sp_formula, data = X,se_type = "classical")
current_pvals = current_model_ols$p.value
current_pvals[is.na(current_pvals)]=1
current_max_pval <- max(current_pvals)
}
cat("\n",current_max_pval,"\n")
support = variables[!(variables %in% deselect_list)]
result = list(support=support, pvals = deselect_pval, eliminated_variables = deselect_list)
result
a = pval_MSE(X,y,variables,0)
a
pval_MSE
?pval_MSE
pval_OSE
pval_MSE()
pval_MSE
result
pval_MSE(X,y,variables,0)
#document
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/TVA"
setwd(path_SY)
document()
install_github('SimonYFR/TVA')
library('TVA')
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_pval_MSE(data,arms,fes,y,w,FALSE,FALSE)
?plot_beta_OSE
arms = c('financial_incentive','reminder','information')
fes = c('fes_1')
y = 'outcome'
w = 'weights'
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
F1 = c(0,1,0,0,0,1,0,1,0,0)
Y  = c(5,4,3,5,4,5,4,2,3,2)
W  = c(1,1,1,2,1,2,2,1,1,2)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3, fes_1 = F1, outcome = Y, weights=W)
plot_beta_OSE(data,arms,fes,y,w,FALSE,FALSE)
?grid_pval_OSE
?pool_data
arms = c('financial_incentive','reminder','information')
A1 = c(0,0,0,0,0,1,1,1,1,1)
A2 = c(1,1,0,0,1,1,0,0,1,1)
A3 = c(0,1,2,3,0,3,2,1,0,1)
data = data.frame(financial_incentive = A1, reminder = A2, information = A3)
marginal_support_strings = c('c_0_1_1', 'c_1_1_2', 'c_1_0_1', 'c_1_0_2')
pool_data(data,arms,marginal_support_strings,FALSE)
?pools_info
