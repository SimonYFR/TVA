library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa = "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
source(paste0(path, "NIHVaccinationProject/United States/Analysis/Code/00_formatting_functions.R"))
df_reg_lasso = read_csv(paste0(path_in, "df_reg_lasso.csv"))
selected_controls = as.list(read.csv(paste0(path_in,"selected_controls.csv")))$x
df_reg_lasso = df_reg_lasso %>%
mutate(treatment_group2 = case_when(treatment_group == "Control" ~ "Control",
treatment_group == "Direct" ~ "Direct",
treatment_group == "Friends" | treatment_group == "Gossips" ~ "Networks"),
treatment_group2 = as.factor(treatment_group2))
rm(list = ls())
# Import packages
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(lubridate)
library(fixest)
library(hdm)
library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa = "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
source(paste0(path, "NIHVaccinationProject/United States/Analysis/Code/00_formatting_functions.R"))
df_reg_lasso = read_csv(paste0(path_in, "df_reg_lasso.csv"))
selected_controls = as.list(read.csv(paste0(path_in,"selected_controls.csv")))$x
df_reg_lasso = df_reg_lasso %>%
mutate(treatment_group2 = case_when(treatment_group == "Control" ~ "Control",
treatment_group == "Direct" ~ "Direct",
treatment_group == "Friends" | treatment_group == "Gossips" ~ "Networks"),
treatment_group2 = as.factor(treatment_group2))
df_reg_lasso_boosters = df_reg_lasso %>% filter(week > "2021-12-26") #This is when we start to have data on booster shots
formula_any = as.formula(paste0('asinh(any_vaccine_new_week) ~  i(treatment_group2, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
formula_boosters = as.formula(paste0('asinh(boosters_new_week) ~  i(treatment_group2, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
reg_week_any <- feols(formula_any, data= df_reg_lasso, cluster="fips") %>% summary()
reg_week_boosters <- feols(formula_boosters, data= df_reg_lasso_boosters, cluster="fips") %>% summary()
models = list(reg_week_any, reg_week_boosters)
#Output graphs
for (i in 1:length(models)){
for (j in c("Direct", "Networks")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Networks*|is_urban|per_*|prop_*",
"Networks" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|is_urban|per_*|prop_*")
p <- modelplot(models[[i]], coef_omit = to_omit, conf_level=0.95, coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash") +
geom_hline(yintercept="01-30", color="red", linetype="longdash") +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Any Vaccines: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
if (i == 1){
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc_lasso.pdf"),plot = p, height=4, width=8)
} else { ggsave(paste0(path_out, "Graphs/3. Boosters/",j,"_asinh_boosters_lasso.pdf"),plot = p, height=4, width=8) }
}
}
rm(list = ls())
# Import packages
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(lubridate)
library(fixest)
library(hdm)
library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
library(comprehenr)
library(kableExtra)
select = dplyr::select
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa =  "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
source(paste0(path, "NIHVaccinationProject/United States/Analysis/Code/00_formatting_functions.R"))
df_reg_lasso = read.csv(paste0(path_in, "df_reg_lasso.csv"))
selected_controls =  as.list(read.csv(paste0(path_in,"selected_controls.csv")))$x
reweight_start = "2021-10-24"
df_unique_fips_outcome = df_reg_lasso %>%
filter(week >= reweight_start & week < "2021-12-26") %>%
group_by(fips) %>%
summarise(mean_asinh_any_vaccine = mean(asinh_any_vaccine, na.rm = TRUE),
mean_asinh_dose1 = mean(asinh_dose1, na.rm=T)) %>%
as.data.frame()
#Dataset at the county level (since weights will be at the county level)
df_unique_fips <- distinct(df_reg_lasso, fips, .keep_all = TRUE) %>%
as.data.frame() %>%
drop_na("per_gop") %>%
left_join(df_unique_fips_outcome, by = "fips")
#Split data into different Control/Treatment groups to compute group-specific entropy weights
df_unique_direct <- df_unique_fips[df_unique_fips$treatment_group == "Direct"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
df_unique_friends <- df_unique_fips[df_unique_fips$treatment_group == "Friends"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
df_unique_gossips <- df_unique_fips[df_unique_fips$treatment_group == "Gossips"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
#Define controls used to calibrate the entropy weights
eb_controls_dose1 <- c("per_point_diff","dose1pre_perc", "census2019", "per_gop", "is_urban", "mean_asinh_dose1")
## Dose 1 analysis
eb_direct_dose1 <- ebalance(Treatment=df_unique_direct$ebTreatment, X=df_unique_direct[,eb_controls_dose1])
eb_friends_dose1 <- ebalance(Treatment=df_unique_friends$ebTreatment, X=df_unique_friends[,eb_controls_dose1])
eb_gossips_dose1 <- ebalance(Treatment=df_unique_gossips$ebTreatment, X=df_unique_gossips[,eb_controls_dose1])
#Create the "dictionary" matching fips and treatment_group to the corresponding entropy weight - Dose 1 only
r1_dose1 = df_unique_direct[df_unique_direct$treatment_group == "Direct",] %>%
mutate(e_weights_dose1 = eb_direct_dose1$w) %>% subset(select = - ebTreatment)
r2_dose1 = df_unique_friends[df_unique_friends$treatment_group == "Friends",] %>%
mutate(e_weights_dose1 = eb_friends_dose1$w) %>% subset(select = - ebTreatment)
r3_dose1 = df_unique_gossips[df_unique_gossips$treatment_group == "Gossips",] %>%
mutate(e_weights_dose1 = eb_gossips_dose1$w) %>% subset(select = - ebTreatment)
r4_dose1 = df_unique_fips[df_unique_fips$treatment_group == "Control",] %>% mutate(e_weights_dose1 = 1)
df_fips_w_dose1 = rbind(r1_dose1,r2_dose1,r3_dose1,r4_dose1) %>% subset(select = c(fips, treatment_group, e_weights_dose1))
#Bind back the data: control has always weights 1 and the different groups have weights to match the control moments
df_reg_lasso_weights = merge(df_reg_lasso, df_fips_w_dose1)
formula_asinh = as.formula(paste0('asinh(dose1_new_week) ~  i(treatment_group, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
wreg_dose1 <- feols(formula_asinh, data= df_reg_lasso_weights, cluster="fips", weights = ~e_weights_dose1) %>% summary()
models = list(wreg_dose1)
rm(list = ls())
# Import packages
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(lubridate)
library(fixest)
library(hdm)
library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
library(comprehenr)
library(kableExtra)
select = dplyr::select
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa =  "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
source(paste0(path, "NIHVaccinationProject/United States/Analysis/Code/00_formatting_functions.R"))
df_reg_lasso = read.csv(paste0(path_in, "df_reg_lasso.csv"))
selected_controls =  as.list(read.csv(paste0(path_in,"selected_controls.csv")))$x
reweight_start = "2021-10-24"
df_unique_fips_outcome = df_reg_lasso %>%
filter(week >= reweight_start & week < "2021-12-26") %>%
group_by(fips) %>%
summarise(mean_asinh_any_vaccine = mean(asinh_any_vaccine, na.rm = TRUE),
mean_asinh_dose1 = mean(asinh_dose1, na.rm=T)) %>%
as.data.frame()
#Dataset at the county level (since weights will be at the county level)
df_unique_fips <- distinct(df_reg_lasso, fips, .keep_all = TRUE) %>%
as.data.frame() %>%
drop_na("per_gop") %>%
left_join(df_unique_fips_outcome, by = "fips")
#Split data into different Control/Treatment groups to compute group-specific entropy weights
df_unique_direct <- df_unique_fips[df_unique_fips$treatment_group == "Direct"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
df_unique_friends <- df_unique_fips[df_unique_fips$treatment_group == "Friends"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
df_unique_gossips <- df_unique_fips[df_unique_fips$treatment_group == "Gossips"|df_unique_fips$treatment_group == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group == "Control", 1,0))
#Define controls used to calibrate the entropy weights
eb_controls_dose1 <- c("per_point_diff","dose1pre_perc", "census2019", "per_gop", "is_urban", "mean_asinh_dose1")
## Dose 1 analysis
eb_direct_dose1 <- ebalance(Treatment=df_unique_direct$ebTreatment, X=df_unique_direct[,eb_controls_dose1])
eb_friends_dose1 <- ebalance(Treatment=df_unique_friends$ebTreatment, X=df_unique_friends[,eb_controls_dose1])
eb_gossips_dose1 <- ebalance(Treatment=df_unique_gossips$ebTreatment, X=df_unique_gossips[,eb_controls_dose1])
#Create the "dictionary" matching fips and treatment_group to the corresponding entropy weight - Dose 1 only
r1_dose1 = df_unique_direct[df_unique_direct$treatment_group == "Direct",] %>%
mutate(e_weights_dose1 = eb_direct_dose1$w) %>% subset(select = - ebTreatment)
r2_dose1 = df_unique_friends[df_unique_friends$treatment_group == "Friends",] %>%
mutate(e_weights_dose1 = eb_friends_dose1$w) %>% subset(select = - ebTreatment)
r3_dose1 = df_unique_gossips[df_unique_gossips$treatment_group == "Gossips",] %>%
mutate(e_weights_dose1 = eb_gossips_dose1$w) %>% subset(select = - ebTreatment)
r4_dose1 = df_unique_fips[df_unique_fips$treatment_group == "Control",] %>% mutate(e_weights_dose1 = 1)
df_fips_w_dose1 = rbind(r1_dose1,r2_dose1,r3_dose1,r4_dose1) %>% subset(select = c(fips, treatment_group, e_weights_dose1))
#Bind back the data: control has always weights 1 and the different groups have weights to match the control moments
df_reg_lasso_weights = merge(df_reg_lasso, df_fips_w_dose1)
formula_asinh = as.formula(paste0('asinh(dose1_new_week) ~  i(treatment_group, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
wreg_dose1 <- feols(formula_asinh, data= df_reg_lasso_weights, cluster="fips", weights = ~e_weights_dose1) %>% summary()
models = list(wreg_dose1)
for (i in 1:length(models)){
for (j in c("Direct", "Friends", "Gossips")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Friends*|Gossips*|is_urban|per_*|treatment_groupDirect|prop_*",
"Friends" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Gossip*|is_urban|per_*|treatment_groupFriends|prop_*",
"Gossips" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Friends*|is_urban|per_*|treatment_groupGossips|prop_*")
p <- modelplot(models2[[i]], coef_omit = to_omit, conf_level=0.95,
coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash", alpha=0.5) +
geom_hline(yintercept="01-30", color="red", linetype="longdash", alpha=0.5) +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Dose 1: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
ggsave(paste0(path_out, "Graphs/1. FirstDose/",j,"_asinh_dose1_weighted.pdf"), plot = p, height=4, width=8)
}
}
models = list(wreg_dose1)
for (i in 1:length(models)){
for (j in c("Direct", "Friends", "Gossips")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Friends*|Gossips*|is_urban|per_*|treatment_groupDirect|prop_*",
"Friends" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Gossip*|is_urban|per_*|treatment_groupFriends|prop_*",
"Gossips" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Friends*|is_urban|per_*|treatment_groupGossips|prop_*")
p <- modelplot(models[[i]], coef_omit = to_omit, conf_level=0.95,
coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash", alpha=0.5) +
geom_hline(yintercept="01-30", color="red", linetype="longdash", alpha=0.5) +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Dose 1: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
ggsave(paste0(path_out, "Graphs/1. FirstDose/",j,"_asinh_dose1_weighted.pdf"), plot = p, height=4, width=8)
}
}
models = list(wreg_dose1)
for (i in 1:length(models)){
for (j in c("Direct", "Friends", "Gossips")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Friends*|Gossips*|is_urban|per_*|treatment_groupDirect|prop_*",
"Friends" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Gossip*|is_urban|per_*|treatment_groupFriends|prop_*",
"Gossips" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|Friends*|is_urban|per_*|treatment_groupGossips|prop_*")
p <- modelplot(models[[i]], coef_omit = to_omit, conf_level=0.95,
coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash", alpha=0.5) +
geom_hline(yintercept="01-30", color="red", linetype="longdash", alpha=0.5) +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Dose 1: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
ggsave(paste0(path_out, "Graphs/1. FirstDose/appendix_",j,"_asinh_dose1_weighted.pdf"), plot = p, height=4, width=8)
}
}
rm(list = ls())
# Import packages
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(lubridate)
library(fixest)
library(hdm)
library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa = "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
source(paste0(path, "NIHVaccinationProject/United States/Analysis/Code/00_formatting_functions.R"))
df_reg_lasso = read_csv(paste0(path_in, "df_reg_lasso.csv"))
selected_controls = as.list(read.csv(paste0(path_in,"selected_controls.csv")))$x
df_reg_lasso = df_reg_lasso %>%
mutate(treatment_group2 = case_when(treatment_group == "Control" ~ "Control",
treatment_group == "Direct" ~ "Direct",
treatment_group == "Friends" | treatment_group == "Gossips" ~ "Networks"),
treatment_group2 = as.factor(treatment_group2))
df_reg_lasso_boosters = df_reg_lasso %>% filter(week > "2021-12-26") #This is when we start to have data on booster shots
formula_any = as.formula(paste0('asinh(any_vaccine_new_week) ~  i(treatment_group2, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
formula_boosters = as.formula(paste0('asinh(boosters_new_week) ~  i(treatment_group2, i.week, ref="Control") + ',
paste(selected_controls, collapse = "+"), "| recip_state + week_num + strata_final"))  #some levels of all FE were chosen so include them all again
reg_week_any <- feols(formula_any, data= df_reg_lasso, cluster="fips") %>% summary()
reg_week_boosters <- feols(formula_boosters, data= df_reg_lasso_boosters, cluster="fips") %>% summary()
models = list(reg_week_any, reg_week_boosters)
#Output graphs
for (i in 1:length(models)){
for (j in c("Direct", "Networks")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Networks*|is_urban|per_*|prop_*",
"Networks" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*|is_urban|per_*|prop_*")
p <- modelplot(models[[i]], coef_omit = to_omit, conf_level=0.95, coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash") +
geom_hline(yintercept="01-30", color="red", linetype="longdash") +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Any Vaccines: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
if (i == 1){
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc_lasso.pdf"),plot = p, height=4, width=8)
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc_lasso.png"),plot = p, height=4, width=8)
} else {  ggsave(paste0(path_out, "Graphs/3. Boosters/",j,"_asinh_boosters_lasso.pdf"),plot = p, height=4, width=8)
ggsave(paste0(path_out, "Graphs/3. Boosters/",j,"_asinh_boosters_lasso.pdf"),plot = p, height=4, width=8)}
}
}
#################################################################################
#################################################################################
#
#################################################################################
#
# END
#################################################################################
#
# END
#
rm(list = ls())
# Import packages
library(tidyverse)
library(stargazer)
library(sandwich)
library(lmtest)
library(lubridate)
library(fixest)
library(hdm)
library(modelsummary)
library(cobalt)
library(estimatr)
library(ebal)
library(janitor)
library(rio)
library(stringi)
# Set file paths
path_lisa = "/Users/lisaho/Dropbox (MIT)/Projects/FB - Vaccination/"
path_LM = "/Users/louis-maeljean/Dropbox (MIT)/"
path_Elsa = "C:/Users/e.trezeguet/Dropbox/"
path = path_LM # other users should change this
path_in = paste0(path, "NIHVaccinationProject/United States/Analysis/Input/")
path_out =  paste0(path, "NIHVaccinationProject/United States/Analysis/Output/")
gen_dates <- function(old_name){
new_name = stri_replace_all_regex(old_name,
pattern = c("treatment_group2::Networks:week::2021-",
"treatment_group2::Networks:week::2022-",
"treatment_group2::Direct:week::2021-",
"treatment_group2::Direct:week::2022-"),
replacement = c("", "", "", ""),
vectorize = FALSE)
cat("\n", old_name, " ---> \t", new_name)
return(new_name)
}
rename_dates = function(old_names) {
new_names = sapply(old_names, gen_dates)
setNames(new_names, old_names)
}
df_week_raw = read_csv(paste0(path_in, "df_week.csv"))
# Define useful variables
campaign_first_week = mdy("12/26/21")
campaign_last_week = mdy("01/30/22")
#Process
df_week = df_week_raw %>%
mutate(direct=ifelse(treatment_group=="Direct", 1, 0),
friends=ifelse(treatment_group=="Friends", 1, 0),
gossips=ifelse(treatment_group=="Gossips", 1, 0),
networks = ifelse(treatment_group == "Friends" | treatment_group == "Gossips", 1,0),
period=case_when(week<campaign_first_week ~ "pre",
week>=campaign_first_week & week<=campaign_last_week ~ "during",
week>campaign_last_week ~ "post"),
log_dose1 = log(dose1_new_week + 1),
log_complete = log(complete_new_week + 1),
log_boosters = log(boosters_new_week+1),
treatment_group2 = case_when(treatment_group == "Control" ~ "Control",
treatment_group == "Direct" ~ "Direct",
treatment_group == "Friends" | treatment_group == "Gossips" ~ "Networks"),
treatment_group = relevel(as.factor(treatment_group), ref = "Control"),
treatment_group2 = relevel(as.factor(treatment_group2), ref = "Control"),
period = relevel(as.factor(period), ref = "pre")) %>%
rowwise() %>%
mutate(any_vaccine_new_week = sum(dose1_new_week, complete_new_week, boosters_new_week, na.rm = TRUE),
log_any_vaccine = log(any_vaccine_new_week + 1),
asinh_any_vaccine = asinh(any_vaccine_new_week),
asinh_dose1 = asinh(dose1_new_week)) %>%
filter(fips < 13000 | fips >= 14000) %>% #Counties in Georgia State have weirdly reported counts for the last week of January
ungroup()
#create mean_y as the mean of outcome y in the pre-treatment period (to get it constant at the county level)
#note that the period in the filter command corresponds to the period over which we calibrate the weights for week-level variables
reweight_start = "2021-10-24"
df_unique_fips_outcome = df_week %>%
filter(week >= reweight_start & week < "2021-12-26") %>%
group_by(fips) %>%
summarise(mean_asinh_any_vaccine = mean(asinh_any_vaccine, na.rm = TRUE),
mean_asinh_dose1 = mean(asinh_dose1, na.rm=T)) %>%
as.data.frame()
#Dataset at the county level (since weights will be at the county level)
df_unique_fips <- distinct(df_week, fips, .keep_all = TRUE) %>%
as.data.frame() %>%
drop_na("per_gop") %>%
left_join(df_unique_fips_outcome, by = "fips")
#Split data into different Control/Treatment groups to compute group-specific entropy weights
df_unique_direct <- df_unique_fips[df_unique_fips$treatment_group2 == "Direct"|df_unique_fips$treatment_group2 == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group2 == "Control", 1,0))
df_unique_networks <- df_unique_fips[df_unique_fips$treatment_group2 == "Networks"|df_unique_fips$treatment_group2 == "Control",] %>%
mutate("ebTreatment" = ifelse(treatment_group2 == "Control", 1,0))
#Define controls used to calibrate the entropy weights
eb_controls <- c("per_point_diff","dose1pre_perc", "census2019", "per_gop", "is_urban", "mean_asinh_dose1")
eb_direct <- ebalance(Treatment=df_unique_direct$ebTreatment, X=df_unique_direct[,eb_controls])
eb_networks <- ebalance(Treatment=df_unique_networks$ebTreatment, X=df_unique_networks[,eb_controls])
#Create the "dictionary" matching fips and treatment_group to the corresponding entropy weight
r1 = df_unique_direct[df_unique_direct$treatment_group2 == "Direct",] %>%
mutate(e_weights = eb_direct$w) %>% subset(select = - ebTreatment)
r2 = df_unique_networks[df_unique_networks$treatment_group2 == "Networks",] %>%
mutate(e_weights = eb_networks$w) %>% subset(select = - ebTreatment)
r3 = df_unique_fips[df_unique_fips$treatment_group2 == "Control",] %>% mutate(e_weights = 1)
df_fips_w = rbind(r1,r2,r3) %>% subset(select = c(fips, treatment_group2, e_weights))
#Bind back the data: control has always weights 1 and the different groups have weights to match the control moments
df_week_weights = merge(df_week, df_fips_w)
df_reg = df_week_weights %>% filter(week >= reweight_start)
df_reg_boosters = df_week_weights %>% filter(week > "2021-12-26") #This is when we start to have data on booster shots
reg_week_total <- feols(asinh(any_vaccine_new_week) ~ i(treatment_group2, i.week, ref="Control") +
per_point_diff + census2019 + dose1pre_perc | recip_state + week + as.factor(strata_final), data= df_reg, cluster="fips")
wreg_week_total <- feols(asinh(any_vaccine_new_week) ~ i(treatment_group2, i.week, ref="Control") +
per_point_diff + census2019 + dose1pre_perc | recip_state + week + as.factor(strata_final), data= df_reg , cluster="fips", weights = ~ e_weights)
reg_week_boosters <- feols(asinh(boosters_new_week) ~ i(treatment_group2, i.week, ref="Control") +
per_point_diff + census2019 + dose1pre_perc + completepre_perc | recip_state + week + as.factor(strata_final), data= df_reg_boosters, cluster="fips")
wreg_week_boosters <- feols(asinh(boosters_new_week) ~ i(treatment_group2, i.week, ref="Control") +
per_point_diff + census2019 + dose1pre_perc +  completepre_perc | recip_state + week + as.factor(strata_final), data= df_reg_boosters, cluster="fips", weights = ~ e_weights)
models = list(reg_week_total, wreg_week_total, reg_week_boosters, wreg_week_boosters)
models_names = c("", "_weighted", "", "_weighted")
#Output graphs
for (i in 1:length(models)){
for (j in c("Direct", "Networks")){
to_omit = switch(j, "Direct" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Networks*",
"Networks" = "per_point_diff|census2019|dose1pre_perc|completepre_perc|Direct*")
p <- modelplot(models[[i]], coef_omit = to_omit, conf_level=0.95, coef_rename=rename_dates) +
geom_hline(yintercept="12-26", color="red", linetype="longdash") +
geom_hline(yintercept="01-30", color="red", linetype="longdash") +
geom_vline(xintercept=0, color="black", linetype="longdash") +
coord_flip() +
xlim(-0.4, 0.4) +
ylab("Week") +
xlab("Coefficient Estimates and 95% CIs") +
ggtitle(paste0("Any Vaccines: ",j," Campaign")) +
theme(axis.text = element_text(size=8, angle = 45), axis.title = element_text(size=18), title=element_text(size=18)) +
theme_bw()
if (i <= 2) {
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc",models_names[i],".pdf"),plot = p, height=4, width=8)
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc",models_names[i],".png"),plot = p, height=4, width=8)
} else {
ggsave(paste0(path_out, "Graphs/3. Boosters/",j,"_asinh_boosters",models_names[i],".pdf"),plot = p, height=4, width=8)
ggsave(paste0(path_out, "Graphs/4. AnyVaccine/",j,"_asinh_anyvacc",models_names[i],".png"),plot = p, height=4, width=8)
}
}
}
#################################################################################
#################################################################################
#
#################################################################################
#
# END
#################################################################################
#
# END
#
install.packages("devtools")
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
library('devtools')
library('roxygen2')
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_LM
setwd(path)
setwd(paste0(path, "/TVA"))
document()
