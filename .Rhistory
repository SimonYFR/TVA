install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("klutometis/roxygen")
library('devtools')
library('roxygen2')
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_LM
setwd(path)
setwd(paste0(path, "/TVA"))
document()
library('devtools')
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
#Simon
#path="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
#Louis-Mael
path="~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
setwd(path)
# load the Haryana data
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
# apply some basic preprocessing before playing with TVA package
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
raw_data[,arms] %>% apply(.,2,max)
raw_data$SMS_1 = raw_data$SMS==1
raw_data$SMS_2 = raw_data$SMS==2
raw_data$flat_incentive_1 = raw_data$flat_incentive==1
raw_data$flat_incentive_2 = raw_data$flat_incentive==2
raw_data$slope_incentive_1 = raw_data$slope_incentive==1
raw_data$slope_incentive_2 = raw_data$slope_incentive==2
raw_data$random_seed_1 = raw_data$random_seed==1
raw_data$trusted_seed_1 = raw_data$trusted_seed==1
raw_data$gossip_seed_1 = raw_data$gossip_seed==1
raw_data$gossip_seed_2 = raw_data$gossip_seed==2
dummy_arms = list(dSMS=c('SMS_1', 'SMS_2'),
dflat_incentive=c('flat_incentive_1','flat_incentive_2'),
dslope_incentive=c('slope_incentive_1','slope_incentive_2'),
drandom_seed=c('random_seed_1'),
dtrusted_seed=c('trusted_seed_1'),
dgossip_seed=c('gossip_seed_1','gossip_seed_2'))
# Define our data parameters
#arms = c('A1','A2','A3','A4','A5','A6')
arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes = names(fes_dummies)
y="shot_Measles1"
data=raw_data
w="village_population"
compare_to_zero = FALSE
# plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# pval multi-step elimination
plot_pval_MSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# beta one-step elimination
plot_beta_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# get a grid of pval cutoff and corresponding support size
grid_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
#check what we get after we perfom TVA
?do_TVA #documentation tells what we get exactly
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result
?vector_to_string
?string_to_vector
?get_policy_fullname
?create_empty_marginals_matrix
?fill_marginals_matrix
?weight_observations
?prepare_data
?plot_pval_OSE
?plot_pval_MSE
?plot_beta_OSE
?grid_pval_OSE
?suggest_pval_OSE_cutoff
?pool_data
?pools_info
?get_pooled_ols
# get a pval cutoff suggestion for pval one-step elimination
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
# get a pval cutoff suggestion for pval one-step elimination
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
source("pooling.R")
pwd
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# get a pval cutoff suggestion for pval one-step elimination
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
# get a pval cutoff suggestion for pval one-step elimination
test = suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
test
class(test)
test$threshold
x = test$threshold
class(x)
x
x+ 10
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = NULL, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = NULL, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
data
arms
y
fes
cutoff
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
is.null(cutoff)
cutoff = NULL
is.null(cutoff)
cutoff
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = f, compare_to_zero=compare_to_zero, clusters=clusters)
check_inputs_integrity()
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
rm(list = ls())
library('TVA')
library('devtools')
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
path_LM= "~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path = path_LM
setwd(path)
# Haryana data
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
# Apply some basic preprocessing before playing with TVA package
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
raw_data[,arms] %>% apply(.,2,max)
raw_data$SMS_1 = raw_data$SMS==1
raw_data$SMS_2 = raw_data$SMS==2
raw_data$flat_incentive_1 = raw_data$flat_incentive==1
raw_data$flat_incentive_2 = raw_data$flat_incentive==2
raw_data$slope_incentive_1 = raw_data$slope_incentive==1
raw_data$slope_incentive_2 = raw_data$slope_incentive==2
raw_data$random_seed_1 = raw_data$random_seed==1
raw_data$trusted_seed_1 = raw_data$trusted_seed==1
raw_data$gossip_seed_1 = raw_data$gossip_seed==1
raw_data$gossip_seed_2 = raw_data$gossip_seed==2
dummy_arms = list(dSMS=c('SMS_1', 'SMS_2'),
dflat_incentive=c('flat_incentive_1','flat_incentive_2'),
dslope_incentive=c('slope_incentive_1','slope_incentive_2'),
drandom_seed=c('random_seed_1'),
dtrusted_seed=c('trusted_seed_1'),
dgossip_seed=c('gossip_seed_1','gossip_seed_2'))
# Define our data parameters
#arms = c('A1','A2','A3','A4','A5','A6')
arms  = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes   = names(fes_dummies)
y     = "shot_Measles1"
data  = raw_data
w     = "village_population"
compare_to_zero = FALSE
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# Plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
1:10
invisible(1:10)
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
# Plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# Plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# pval multi-step elimination
plot_pval_MSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# beta one-step elimination
plot_beta_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# pval multi-step elimination
plot_pval_MSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# beta one-step elimination
plot_beta_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# get a grid of pval cutoff and corresponding support size
grid_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
#
#------ This file contains the functions related to thresholding
#------ (pval plots, grids or suggesting cutoffs)
#
#################################################################
# END
#################################################################
# END
#################################################################
install.packages(ddpcr)
install.packages("ddpcr")
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
library("purrr")
# get a pval cutoff suggestion for pval one-step elimination
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
# get a pval cutoff suggestion for pval one-step elimination
test = suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc') %>%
purrr:quetly()
# get a pval cutoff suggestion for pval one-step elimination
test = suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc') %>%
purrr:quietly()
# get a pval cutoff suggestion for pval one-step elimination
test = suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc') %>% quietly()
# get a pval cutoff suggestion for pval one-step elimination
test = quetly(suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc'))
# get a pval cutoff suggestion for pval one-step elimination
test = quietly(suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc'))
# get a pval cutoff suggestion for pval one-step elimination
quiet_suggest_pval = quietly(suggest_pval_cutoff)
test = quiet_suggest_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
test
test$result
test$result$threshold
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
# pval one-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes,  w = w, estim_func = 'pval_OSE', compare_to_zero = FALSE, clusters='id_sc')
source("~/Dropbox (MIT)/Smart Pooling and Pruning/Package/TVA/R/pooling.R")
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result$marginal_support
result$pools_summary
rm(list = ls())
library('TVA')
#install.packages("devtools")  # Needed to install a package directly from github
install_github('SimonYaspo/TVA')    # Install the actual package
install.packages("devtools")  # Needed to install a package directly from github
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
rm(list = ls())
library('devtools')
install_github('SimonYaspo/TVA')    # Install the actual package
library('TVA')
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
path_LM= "~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path = path_LM
setwd(path)
# Haryana data
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
# Apply some basic preprocessing before playing with TVA package
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
raw_data[,arms] %>% apply(.,2,max)
raw_data$SMS_1 = raw_data$SMS==1
raw_data$SMS_2 = raw_data$SMS==2
raw_data$flat_incentive_1 = raw_data$flat_incentive==1
raw_data$flat_incentive_2 = raw_data$flat_incentive==2
raw_data$slope_incentive_1 = raw_data$slope_incentive==1
raw_data$slope_incentive_2 = raw_data$slope_incentive==2
raw_data$random_seed_1 = raw_data$random_seed==1
raw_data$trusted_seed_1 = raw_data$trusted_seed==1
raw_data$gossip_seed_1 = raw_data$gossip_seed==1
raw_data$gossip_seed_2 = raw_data$gossip_seed==2
dummy_arms = list(dSMS=c('SMS_1', 'SMS_2'),
dflat_incentive=c('flat_incentive_1','flat_incentive_2'),
dslope_incentive=c('slope_incentive_1','slope_incentive_2'),
drandom_seed=c('random_seed_1'),
dtrusted_seed=c('trusted_seed_1'),
dgossip_seed=c('gossip_seed_1','gossip_seed_2'))
# Define our data parameters
#arms = c('A1','A2','A3','A4','A5','A6')
arms  = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes   = names(fes_dummies)
y     = "shot_Measles1"
data  = raw_data
w     = "village_population"
compare_to_zero = FALSE
# Plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# get a pval cutoff suggestion for pval one-step elimination
suggest_pval_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
?suggest_pval_cutoff
?do_TVA
document()
path = path_LM
setwd(path)
setwd(paste0(path, "/TVA"))
devtools::install_github("klutometis/roxygen")
library('devtools')
library('roxygen2')
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_LM
setwd(path)
setwd(paste0(path, "/TVA"))
document()
