raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
raw_data[,arms] %>% apply(.,2,max)
raw_data$SMS_1 = raw_data$SMS==1
raw_data$SMS_2 = raw_data$SMS==2
raw_data$flat_incentive_1 = raw_data$flat_incentive==1
raw_data$flat_incentive_2 = raw_data$flat_incentive==2
raw_data$slope_incentive_1 = raw_data$slope_incentive==1
raw_data$slope_incentive_2 = raw_data$slope_incentive==2
raw_data$random_seed_1 = raw_data$random_seed==1
raw_data$trusted_seed_1 = raw_data$trusted_seed==1
raw_data$gossip_seed_1 = raw_data$gossip_seed==1
raw_data$gossip_seed_2 = raw_data$gossip_seed==2
dummy_arms = list(dSMS=c('SMS_1', 'SMS_2'),
dflat_incentive=c('flat_incentive_1','flat_incentive_2'),
dslope_incentive=c('slope_incentive_1','slope_incentive_2'),
drandom_seed=c('random_seed_1'),
dtrusted_seed=c('trusted_seed_1'),
dgossip_seed=c('gossip_seed_1','gossip_seed_2'))
# Define our data parameters
#arms = c('A1','A2','A3','A4','A5','A6')
arms  = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes   = names(fes_dummies)
y     = "shot_Measles1"
data  = raw_data
w     = "village_population"
compare_to_zero = FALSE
clusters='id_sc'
estim_func="pval_MSE"
support_size_target = NULL
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
rm(list = ls())
library('devtools')
install_github('SimonYaspo/TVA')    # Install the actual package
library('TVA')
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
install_github('SimonYaspo/TVA')    # Install the actual package
library('TVA')
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package/package_test"
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path_LM= "~/Dropbox (MIT)/Smart Pooling and Pruning/Package/package_test"
path = path_SY
setwd(path)
# Haryana data
raw_data <- read.csv('Tablet_VillageXMonth_Costs.csv',sep=',',header = TRUE,fileEncoding="UTF-8-BOM")
# Apply some basic preprocessing before playing with TVA package
raw_data <- raw_data %>% dplyr::filter(.,seedsrisk == 1)
raw_data <- raw_data %>% dplyr::filter(first_implementation == 1)
raw_data$fes <- as.numeric(factor(paste0(raw_data$id_district, raw_data$created_year, raw_data$created_month)))
fes_dummies <- data.frame(lme4::dummy(raw_data$fes))
raw_data <- cbind(raw_data, fes_dummies)
raw_data$A1=0
raw_data$A2=0
raw_data$A3=0
raw_data$A4=0
raw_data$A5=0
raw_data$A6=0
#A1 - SMS
raw_data$A1[raw_data$trfrac66_first==1]=2
raw_data$A1[raw_data$trfrac33_first==1]=1
#A2 - flat incentive
raw_data$A2[raw_data$flat==1]=1
raw_data$A2[raw_data$highflat==1]=2
#A3 - slope incentive
raw_data$A3[raw_data$slope==1]=1
raw_data$A3[raw_data$highslope==1]=2
#A4 - random seed
raw_data$A4[raw_data$random==1]=1
#A5 - trusted seed
raw_data$A5[raw_data$trusted==1]=1
#A6 - gossip seed
raw_data$A6[raw_data$gossip==1]=1
raw_data$A6[raw_data$trustgossip==1]=2
arms = c('A1','A2','A3','A4','A5','A6')
true_arms = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
for (i in 1:length(arms)){
raw_data[,true_arms[i]] = raw_data[,arms[i]]
}
raw_data[,arms] %>% apply(.,2,max)
raw_data$SMS_1 = raw_data$SMS==1
raw_data$SMS_2 = raw_data$SMS==2
raw_data$flat_incentive_1 = raw_data$flat_incentive==1
raw_data$flat_incentive_2 = raw_data$flat_incentive==2
raw_data$slope_incentive_1 = raw_data$slope_incentive==1
raw_data$slope_incentive_2 = raw_data$slope_incentive==2
raw_data$random_seed_1 = raw_data$random_seed==1
raw_data$trusted_seed_1 = raw_data$trusted_seed==1
raw_data$gossip_seed_1 = raw_data$gossip_seed==1
raw_data$gossip_seed_2 = raw_data$gossip_seed==2
dummy_arms = list(dSMS=c('SMS_1', 'SMS_2'),
dflat_incentive=c('flat_incentive_1','flat_incentive_2'),
dslope_incentive=c('slope_incentive_1','slope_incentive_2'),
drandom_seed=c('random_seed_1'),
dtrusted_seed=c('trusted_seed_1'),
dgossip_seed=c('gossip_seed_1','gossip_seed_2'))
# Define our data parameters
#arms = c('A1','A2','A3','A4','A5','A6')
arms  = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes   = names(fes_dummies)
y     = "shot_Measles1"
data  = raw_data
w     = "village_population"
compare_to_zero = FALSE
clusters='id_sc'
estim_func="pval_MSE"
support_size_target = NULL
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result$marginal_support
result$pools_summary
result$unique_policy
result$data
result$fes_support
result$pooled_ols
result$winners_effect
d = result$data
d %>% select(-contains("marginal_"))
d %>% dplyr::select(-contains("marginal_"))
subset(d, select = -c(pool_influences, pool_influences_list))
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
result$marginal_support
result$pools_summary
result$unique_policy
result$data
result$fes_support
result$pooled_ols
result$winners_effect
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc', details = TRUE)
result$marginal_support
result$pools_summary
result$unique_policy
result$marginal_support
result$pools_summary
result$unique_policy
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc', details = TRUE)
result$unique_policy
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
o
o
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# pval multi-step elimination
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, cutoff = 5 * 10^(-13), w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc', details = TRUE)
result$winners_hybrid_estimate
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_OSE', compare_to_zero = FALSE, clusters='id_sc')
result_nocutoff = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'beta_OSE', compare_to_zero = FALSE, clusters='id_sc')
estim_func = "beta_OSE"
check = check_inputs_integrity(data, arms, y, fes, 1, w, estim_func, compare_to_zero, clusters)
if (!check$integrity){
stop(check$message)
}
prepared_data = prepare_data(data,arms,y, fes,w,compare_to_zero)
X = prepared_data$X
data = prepared_data$data
arms = prepared_data$arms
variables = prepared_data$variables
marginals_colnames = prepared_data$marginals_colnames
f = get(estim_func)
thresholds = f(X,y,variables,0)$coefficients
thresholds
thresholds = f(X,y,variables,1e100)$coefficients
thresholds
f(X,y,variables,0)
thresholds = f(X,y,variables,1e100)$beta
thresholds
m_thresholds = thresholds[marginals_colnames] %>% sort(decreasing = FALSE)
m_thresholds
m_thresholds = thresholds[marginals_colnames] %>% sort(decreasing = FALSE) %>% abs()
m_thresholds
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
m_thresholds
gridval = floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))/10 * 10^(floor(log(m_thresholds, base = 10))) #round the pvals
gridval = gridval[1: (length(gridval)/3) %>% ceiling()] %>% unname() %>% unique()
gridval
floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))
m_thresholds*100
floor(m_thresholds*100)
floor(m_thresholds*100)/100
f = get('pval_OSE')
f(X,y,variables,0)
thresholds = f(X,y,variables,1e100)$beta
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
m_thresholds
thresholds = f(X,y,variables,1e100)$pval
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
m_thresholds
gridval = floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))/10 * 10^(floor(log(m_thresholds, base = 10))) #round the pvals
gridval = gridval[1: (length(gridval)/3) %>% ceiling()] %>% unname() %>% unique()
gridval
f = get(estim_func)
thresholds = f(X,y,variables,1e100)$beta
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
m_thresholds
gridval = floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))/10 * 10^(floor(log(m_thresholds, base = 10))) #round the pvals
gridval = gridval[1: (length(gridval)/3) %>% ceiling()] %>% unname() %>% unique()
gridval
thresholds = f(X,y,variables,0)$beta
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
m_thresholds
gridval
f = get(estim_func)
f(X,y,variables,0)
thresholds = f(X,y,variables,0)$beta
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = FALSE)
gridval = floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))/10 * 10^(floor(log(m_thresholds, base = 10))) #round the pvals
gridval = gridval[1: (length(gridval)/3) %>% ceiling()] %>% unname() %>% unique()
marginal_support_sizes = c()
number_of_pools = c()
differ_from_zero = c()
rsqr = c()
adj_rsqr = c()
for (threshold in gridval){
total_support = names(thresholds[which(thresholds<=threshold)]) #compute the total_support
marginal_support = intersect(total_support,marginals_colnames) %>% sort() #take the marginal support
pooled_data = pool_data(data,arms,marginal_support,compare_to_zero)
pool_ids = paste("pool_id",c(1:max(pooled_data$pool_id)),sep="_")
fes_support = sort(intersect(total_support,fes))
if (length(marginal_support)>0){
pooled_ols = get_pooled_ols(pooled_data,y,fes_support,w,pool_ids,clusters) #do pooled OLS
ols_coefs = pooled_ols$coefficients
pools_coefs = ols_coefs[grep("pool_id_", ols_coefs %>% names, value = TRUE)] #take pools_coefficients
two_bests = (pools_coefs %>% sort(.,decreasing=TRUE))[1:2] %>% names() #take the two bests
two_bests_differ_from_zero = all(pooled_ols$p.value[two_bests] < 0.05)
ols_rsqr = pooled_ols$r.squared
ols_adj_rsqr = pooled_ols$adj.r.squared
}else{
two_bests_differ_from_zero = FALSE
ols_rsqr = 0
ols_adj_rsqr = 0
}
differ_from_zero = c(differ_from_zero, two_bests_differ_from_zero)
number_of_pools = c(number_of_pools, pooled_data$pool_id %>% max() +1)
marginal_support_sizes = c(marginal_support_sizes, length(marginal_support))
rsqr = c(rsqr, ols_rsqr )
adj_rsqr = c(adj_rsqr, ols_adj_rsqr)
}
m_thresholds = thresholds[marginals_colnames] %>% abs() %>% sort(decreasing = TRUE)
gridval = floor(m_thresholds / 10^(floor(log(m_thresholds, base = 10))-1))/10 * 10^(floor(log(m_thresholds, base = 10))) #round the pvals
gridval = gridval[1: (length(gridval)/3) %>% ceiling()] %>% unname() %>% unique()
gridval
marginal_support_sizes = c()
number_of_pools = c()
differ_from_zero = c()
rsqr = c()
adj_rsqr = c()
for (threshold in gridval){
total_support = names(thresholds[which(thresholds<=threshold)]) #compute the total_support
marginal_support = intersect(total_support,marginals_colnames) %>% sort() #take the marginal support
pooled_data = pool_data(data,arms,marginal_support,compare_to_zero)
pool_ids = paste("pool_id",c(1:max(pooled_data$pool_id)),sep="_")
fes_support = sort(intersect(total_support,fes))
if (length(marginal_support)>0){
pooled_ols = get_pooled_ols(pooled_data,y,fes_support,w,pool_ids,clusters) #do pooled OLS
ols_coefs = pooled_ols$coefficients
pools_coefs = ols_coefs[grep("pool_id_", ols_coefs %>% names, value = TRUE)] #take pools_coefficients
two_bests = (pools_coefs %>% sort(.,decreasing=TRUE))[1:2] %>% names() #take the two bests
two_bests_differ_from_zero = all(pooled_ols$p.value[two_bests] < 0.05)
ols_rsqr = pooled_ols$r.squared
ols_adj_rsqr = pooled_ols$adj.r.squared
}else{
two_bests_differ_from_zero = FALSE
ols_rsqr = 0
ols_adj_rsqr = 0
}
differ_from_zero = c(differ_from_zero, two_bests_differ_from_zero)
number_of_pools = c(number_of_pools, pooled_data$pool_id %>% max() +1)
marginal_support_sizes = c(marginal_support_sizes, length(marginal_support))
rsqr = c(rsqr, ols_rsqr )
adj_rsqr = c(adj_rsqr, ols_adj_rsqr)
}
gridval
marginal_support_sizes = c()
number_of_pools = c()
differ_from_zero = c()
rsqr = c()
adj_rsqr = c()
for (threshold in gridval){
total_support = names(thresholds[which(thresholds>=threshold)]) #compute the total_support
marginal_support = intersect(total_support,marginals_colnames) %>% sort() #take the marginal support
pooled_data = pool_data(data,arms,marginal_support,compare_to_zero)
pool_ids = paste("pool_id",c(1:max(pooled_data$pool_id)),sep="_")
fes_support = sort(intersect(total_support,fes))
if (length(marginal_support)>0){
pooled_ols = get_pooled_ols(pooled_data,y,fes_support,w,pool_ids,clusters) #do pooled OLS
ols_coefs = pooled_ols$coefficients
pools_coefs = ols_coefs[grep("pool_id_", ols_coefs %>% names, value = TRUE)] #take pools_coefficients
two_bests = (pools_coefs %>% sort(.,decreasing=TRUE))[1:2] %>% names() #take the two bests
two_bests_differ_from_zero = all(pooled_ols$p.value[two_bests] < 0.05)
ols_rsqr = pooled_ols$r.squared
ols_adj_rsqr = pooled_ols$adj.r.squared
}else{
two_bests_differ_from_zero = FALSE
ols_rsqr = 0
ols_adj_rsqr = 0
}
differ_from_zero = c(differ_from_zero, two_bests_differ_from_zero)
number_of_pools = c(number_of_pools, pooled_data$pool_id %>% max() +1)
marginal_support_sizes = c(marginal_support_sizes, length(marginal_support))
rsqr = c(rsqr, ols_rsqr )
adj_rsqr = c(adj_rsqr, ols_adj_rsqr)
}
grid
grid = data.frame( threshold = gridval
,marginal_support_size= marginal_support_sizes
,number_of_pools=number_of_pools
,differ_from_zero=differ_from_zero
,rsqr = rsqr
,adj_rsqr = adj_rsqr)
grid
#create library
path_SY="C:/Users/s.yaspo/Dropbox/Smart Pooling and Pruning/Package"
path_SY="C:/Users/Simon/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path_LM = "~/Dropbox (MIT)/Smart Pooling and Pruning/Package"
path = path_SY
setwd(path)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# Plot the pval or beta cutoff and corresponding support size for :
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# pval multi-step elimination
plot_pval_MSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# beta one-step elimination
plot_beta_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
# get a grid of pval cutoff and corresponding support size
grid_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
grid_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_OSE', compare_to_zero=FALSE, clusters='id_sc')
grid_lambda(data=data,arms=arms,y=y, fes=fes,w=w, compare_to_zero=compare_to_zero,clusters='id_sc')
# get a cutoff suggestion
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_OSE', compare_to_zero=FALSE, clusters='id_sc')
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'beta_OSE', compare_to_zero=FALSE, clusters='id_sc')
grid = grid_lambda(data=data,arms=arms,y=y, fes=fes,w=w, compare_to_zero=compare_to_zero,clusters='id_sc')
grid
elbow(grid$marginal_support_size, grid$rsqr)
X=grid$marginal_support_size
Y=grid$rsqr
X = sort(X)
Y = sort(Y)
X
Y
smoothed_Y = smooth.spline(X, Y, spar=0.65)$y
smoothed_Y
d1 <- diff(smoothed_Y) / diff(X) # first derivative
length(Y)
length(smoothed_Y)
length(X)
grid_pval(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_OSE', compare_to_zero=FALSE, clusters='id_sc')
grid_lambda(data=data,arms=arms,y=y, fes=fes,w=w, compare_to_zero=compare_to_zero,clusters='id_sc')
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
grid = grid_lambda(data=data,arms=arms,y=y, fes=fes,w=w, compare_to_zero=compare_to_zero,clusters='id_sc')
grid
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'beta_OSE', compare_to_zero=FALSE, clusters='id_sc')
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# get a cutoff suggestion
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'beta_OSE', compare_to_zero=FALSE, clusters='id_sc')
grid=grid_lambda(data=data,arms=arms,y=y, fes=fes,w=w, compare_to_zero=compare_to_zero,clusters='id_sc')
grid
ggplot2::ggplot(data=grid, ggplot2::aes(x=marginal_support_size , y=rsqr))
ggplot2::ggplot(data=grid, ggplot2::aes(x=marginal_support_size , y=rsqr)) +
ggplot2::geom_line(linetype = "dashed") +
ggplot2::geom_point()
X = grid$marginal_support_size
Y=grid$rsqr
smoothed_Y = smooth.spline(X, Y, spar=0.65)$y
d1 <- diff(smoothed_Y) / diff(X) # first derivative
d2 <- diff(d1) / diff(X[-1]) # second derivative
d2
document()
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
grid_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'beta_OSE', compare_to_zero=FALSE, clusters='id_sc')
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'beta_OSE', compare_to_zero=FALSE, clusters='id_sc')
# get a cutoff suggestion
suggest_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
# pval one-step elimination
plot_pval_OSE(data=data,arms=arms,y=y,fes=fes,w=w,compare_to_zero=compare_to_zero)
setwd(paste0(path, "/TVA"))
document()
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# cutoff vs support size plot
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_MSE", compare_to_zero=compare_to_zero)
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_OSE", compare_to_zero=compare_to_zero)
# Define our data parameters
arms  = c('SMS','flat_incentive','slope_incentive','random_seed','trusted_seed','gossip_seed')
fes   = names(fes_dummies)
y     = "shot_Measles1"
data  = raw_data
w     = "village_population"
compare_to_zero = FALSE
clusters='id_sc'
estim_func="pval_MSE"
support_size_target = NULL
# cutoff vs support size plot
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_MSE", compare_to_zero=compare_to_zero)
data
data[y,]
data[,y]
y
# cutoff vs support size plot
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_MSE", compare_to_zero=compare_to_zero)
#suggest cutoff
result = do_TVA(data = data, arms = arms, y = y,  fes = fes, w = w, estim_func = 'pval_MSE', compare_to_zero = FALSE, clusters='id_sc')
# get a grid of cutoff and corresponding support size
grid_cutoff(data=data, arms=arms, y=y, fes=fes, w=w, estim_func = 'pval_MSE', compare_to_zero=FALSE, clusters='id_sc')
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_OSE", compare_to_zero=compare_to_zero)
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="beta_OSE", compare_to_zero=compare_to_zero)
plot_beta_OSE(data,arms,y, fes,w=w,compare_to_zero=FALSE)
# cutoff vs support size plot
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_MSE", compare_to_zero=compare_to_zero)
setwd(paste0(path, "/TVA"))
document()
#Install the actual package
install_github('SimonYaspo/TVA')
library('TVA')
# cutoff vs support size plot
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_MSE", compare_to_zero=compare_to_zero)
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="pval_OSE", compare_to_zero=compare_to_zero)
plot_cutoff_vs_support_size(data=data,arms=arms,y=y,fes=fes,w=w, estim_func="beta_OSE", compare_to_zero=compare_to_zero)
